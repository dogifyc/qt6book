(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{517:function(t,e,s){t.exports=s.p+"assets/img/blender-monkey.311bc509.png"},518:function(t,e,s){t.exports=s.p+"assets/img/blender-export-menu.bb2b7cef.png"},519:function(t,e,s){t.exports=s.p+"assets/img/blender-export-collada.675b19ab.png"},520:function(t,e,s){t.exports=s.p+"assets/img/balsamui-1.0233a4f6.png"},521:function(t,e,s){t.exports=s.p+"assets/img/balsamui-2.9d332b6a.png"},522:function(t,e,s){t.exports=s.p+"assets/img/asset-first-input.81050be1.png"},523:function(t,e,s){t.exports=s.p+"assets/img/asset-second-input.46c48e25.png"},654:function(t,e,s){"use strict";s.r(e);var a=s(24),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"working-with-assets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#working-with-assets"}},[t._v("#")]),t._v(" Working with Assets")]),t._v(" "),a("p",[t._v("When working with 3D scenes, the built in meshes quickly grow old. Instead, a good flow from a modelling tool into QML is needed. Qt Quick 3D comes with the Balsam asset import tool, which is used to convert common asset formats into a Qt Quick 3D friendly format.")]),t._v(" "),a("p",[t._v("The purpose of Balsam is to make it easy to take assets created in common tools such as "),a("a",{attrs:{href:"https://www.blender.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Blender"),a("OutboundLink")],1),t._v(", Maya or 3ds Max and use them from Qt Quick 3D. Balsam supports the following asset types:")]),t._v(" "),a("ul",[a("li",[t._v("COLLADA ("),a("code",[t._v("*.dae")]),t._v(")")]),t._v(" "),a("li",[t._v("FBX ("),a("code",[t._v("*.fbx")]),t._v(")")]),t._v(" "),a("li",[t._v("GLTF2 ("),a("code",[t._v("*.gltf")]),t._v(", "),a("code",[t._v("*.glb")]),t._v(")")]),t._v(" "),a("li",[t._v("STL ("),a("code",[t._v("*.stl")]),t._v(")")]),t._v(" "),a("li",[t._v("Wavefront ("),a("code",[t._v("*.obj")]),t._v(")")])]),t._v(" "),a("p",[t._v("For some format, texture assets can also be exported into a Qt Quick 3D-friendly format, as long as Qt Quick 3D supports the given asset.")]),t._v(" "),a("h2",{attrs:{id:"blender"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blender"}},[t._v("#")]),t._v(" Blender")]),t._v(" "),a("p",[t._v("To generate an asset that we can import, we will use Blender to create a scene with a monkey head in it. We will then export this as a "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/COLLADA",target:"_blank",rel:"noopener noreferrer"}},[t._v("COLLADA"),a("OutboundLink")],1),t._v(" file to be able to convert it to a Qt Quick 3D friendly file format using Balsam.")]),t._v(" "),a("p",[t._v("Blender is available from "),a("a",{attrs:{href:"https://www.blender.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.blender.org/"),a("OutboundLink")],1),t._v(", and mastering Blender is a topic for another book, so we will do the most basic thing possible. Remove the original cube (select the cube with the left mouse button, press"),a("code",[t._v("shift + x")]),t._v(", select "),a("em",[t._v("Delete")]),t._v("), add a mesh (from the keyboard "),a("code",[t._v("shift + a")]),t._v(", select "),a("em",[t._v("Mesh")]),t._v("), and select to add a monkey (select "),a("em",[t._v("Monkey")]),t._v(" from the list of available meshes). There are a number of video tutorials demonstrating how to do this. The resulting Blender user interface with the monkey head scene can be seen below.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(517),alt:"image"}})]),t._v(" "),a("p",[t._v("Once the head is in place, go to File -> Export -> COLLADA.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(518),alt:"image"}})]),t._v(" "),a("p",[t._v("This takes you to the Export COLLADA dialog where you can export the resulting scene.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(519),alt:"image"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),a("p",[t._v("Both the blender scene and the exported COLLADA file ("),a("code",[t._v("*.dae")]),t._v(") can be found among the example files for the chapter.")])]),t._v(" "),a("h2",{attrs:{id:"balsam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#balsam"}},[t._v("#")]),t._v(" Balsam")]),t._v(" "),a("p",[t._v("Once the COLLADA file has been saved to disk, we can prepare it for use in Qt Quick 3D using Balsam. Balsam is available as a command line tool, or through a graphical user interface, using the "),a("code",[t._v("balsamui")]),t._v(" tool. The graphical tool is just a thin layer on top of the command line tool, so there is no difference in what you can do with either tool.")]),t._v(" "),a("p",[t._v("We start by adding the "),a("code",[t._v("monkey.dae")]),t._v(" file to the input files section, and set the output folder to a reasonable path.Your paths will most likely be different from the ones shown in the screenshot.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(520),alt:"image"}})]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("Settings")]),t._v(" tab in the "),a("code",[t._v("balsamui")]),t._v(" includes all the options. These all correspond to a command line option of the "),a("code",[t._v("balsam")]),t._v(" tool. For now, we will leave all of them with their default values.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(521),alt:"image"}})]),t._v(" "),a("p",[t._v("Now, go back to the "),a("em",[t._v("Input")]),t._v(" tab and click "),a("em",[t._v("Convert")]),t._v(". This will result in the following output in the status section of the user interface:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Converting 1 files...\n[1/1] Successfully converted '/home/.../src/basicasset/monkey.dae'\n\nSuccessfully converted all files!\n")])])]),a("p",[t._v("If you started "),a("code",[t._v("balsamui")]),t._v(" from the command line, you will also see the following output there:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('generated file:  "/home/.../src/basicasset/Monkey.qml"\ngenerated file:  "/home/.../src/basicasset/meshes/suzanne.mesh"\n')])])]),a("p",[t._v("This means that Balsam generated a "),a("code",[t._v("*.qml")]),t._v(" file and a "),a("code",[t._v("*.mesh")]),t._v(" file.")]),t._v(" "),a("h2",{attrs:{id:"the-qt-quick-3d-assets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-qt-quick-3d-assets"}},[t._v("#")]),t._v(" The Qt Quick 3D Assets")]),t._v(" "),a("p",[t._v("To use the files from a Qt Quick project we need to add them to the project. This is done in the "),a("code",[t._v("CMakeLists.txt")]),t._v(" file, in the "),a("code",[t._v("qt_add_qml_module")]),t._v(" macro. Add the files to the "),a("code",[t._v("QML_FILES")]),t._v(" and "),a("code",[t._v("RESOURCES")]),t._v(" sections as shown below.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("qt_add_qml_module(appbasicasset\n    URI basicasset\n    VERSION 1.0\n    QML_FILES main.qml Monkey.qml \n    RESOURCES meshes/suzanne.mesh\n)\n")])])]),a("p",[t._v("Having done this, we can populate a "),a("code",[t._v("View3D")]),t._v(" with the "),a("code",[t._v("Monkey.qml")]),t._v(" as shown below.")]),t._v(" "),a("div",{staticClass:"language-qml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-qml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View3D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("anchors.fill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("parent")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SceneEnvironment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("clearColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#222222"')])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("backgroundMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("SceneEnvironment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Color")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Monkey")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("p",[t._v("The "),a("code",[t._v("Monkey.qml")]),t._v(" contains the entire Blender scene, including the camera and a light, so the result is a complete scene as shown below.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(522),alt:"image"}})]),t._v(" "),a("p",[t._v("The interested reader is encouraged to explore the "),a("code",[t._v("Monkey.qml")]),t._v(" file. As you will see, it contains a completely normal Qt Quick 3D scene built from the elements we already have used in this chapter.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),a("p",[t._v("As "),a("code",[t._v("Monkey.qml")]),t._v(" is generated by a tool, do not modify the file manually. If you do, your changes will be overwritten if you ever have to regenerate the file using Balsam.")])]),t._v(" "),a("p",[t._v("An alternative to using the entire scene from Blender is to use the "),a("code",[t._v("*.mesh")]),t._v(" file in a Qt Quick 3D scene. This is demonstrated in the code below.")]),t._v(" "),a("p",[t._v("Here, we put a "),a("code",[t._v("DirectionalLight")]),t._v(" and "),a("code",[t._v("PerspectiveCamera")]),t._v(" into a "),a("code",[t._v("View3D")]),t._v(", and combine it with the mesh using a "),a("code",[t._v("Model")]),t._v(" element. This way, we can control the positioning, scale, and lighting from QML. We also specify a different, yellow, material for the monkey head.")]),t._v(" "),a("div",{staticClass:"language-qml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-qml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View3D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("anchors.fill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("parent")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SceneEnvironment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("clearColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#222222"')])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("backgroundMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("SceneEnvironment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Color")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Model")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("source")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"meshes/suzanne.mesh"')])]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("scale")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("Qt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vector3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("eulerRotation.y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("eulerRotation.x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")])]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("materials")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" DefaultMaterial "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("diffuseColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yellow"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PerspectiveCamera")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("Qt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vector3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("Component.onCompleted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Qt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vector3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DirectionalLight")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("eulerRotation.x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("eulerRotation.y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")])]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("castsShadow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("p",[t._v("The resulting view is shown below.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(523),alt:"image"}})]),t._v(" "),a("p",[t._v("This demonstrates how a simple mesh can be exported from a 3D design tool such as blender, converted to a Qt Quick 3D format and then used from QML. One thing to think about is that we can import the entire scene as is, i.e. using "),a("code",[t._v("Monkey.qml")]),t._v(", or use only the assets, e.g. "),a("code",[t._v("suzanne.mesh")]),t._v(". This puts you in control of the trade-off between simple importing of a scene, and added complexity while gaining flexibility by setting up the scene in QML.")])])}),[],!1,null,null,null);e.default=n.exports}}]);